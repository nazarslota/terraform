name: Deploy to GKE

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Google Container Registry
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/jurny-rider-backend:${{ github.sha }}, gcr.io/${{ secrets.GCP_PROJECT_ID }}/jurny-rider-backend:latest
          build-args: |
            --build-arg GITHUB_SHA=${{ github.sha }}
            --build-arg GITHUB_REF=${{ github.ref }}
            --build-arg GITHUB_REPOSITORY=${{ github.repository }}
          context: .
          file: ./deployments/dockerfiles/Dockerfile


  deploy:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployments/terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@main
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Setup Google Cloud credentials
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > $PWD/gcp-service-account-key.json

      - name: Terraform initialize
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS='gcp-service-account-key.json'
          terraform init

      - name: Terraform validate
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS='gcp-service-account-key.json'
          terraform validate

      - name: Terraform plan
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS='gcp-service-account-key.json'
          terraform plan

      - name: Terraform apply
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS='gcp-service-account-key.json'
          terraform apply -auto-approve

      - name: Set Cluster Info as Env Vars
        id: set_vars
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS='gcp-service-account-key.json'
          echo "::set-output name=cluster_name::$(terraform output -raw cluster_name)"
          echo "::set-output name=cluster_zone::$(terraform output -raw cluster_zone)"

      - name: Print Cluster Info
        run: |
          echo ${{ steps.set_vars.outputs.cluster_name }}
          echo ${{ steps.set_vars.outputs.cluster_zone }}

#      - name: Set Cluster Info as Env Vars
#        id: set_vars
#        run: |
#          echo "::set-output name=cluster_name::$(terraform output -raw cluster_name)"
#          echo "::set-output name=cluster_zone::$(terraform output -raw cluster_zone)"
#
#      - name: Configure kubectl
#        run: |
#          gcloud container clusters get-credentials ${{ steps.set_vars.outputs.cluster_name }} --zone ${{ steps.set_vars.outputs.cluster_zone }} --project ${{ secrets.GCP_PROJECT_ID }}
#
#      - name: Deploy to GKE
#        run: |
#          kubectl apply -f ../k8s-deployment.yaml
