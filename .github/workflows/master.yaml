name: CI-CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

  GKE_CLUSTER: 'unotes-000-gke'
  GKE_ZONE: 'us-east4-a'
  GKE_IMAGE: 'jurny-rider-backend'
  K8S_MANIFEST: './deployments/deployment.yaml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}

      - run: |-
          gcloud --quiet auth configure-docker

      - name: 'Build the Docker image'
        run: |-
          docker build \
            --file ./deployments/dockerfiles/Dockerfile \
            --tag "gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GKE_IMAGE }}:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
          .

      - name: 'Push the Docker image to Google Container Registry'
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

  infrastructure:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployments/terraform
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Google Cloud credentials'
        run: echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > $GOOGLE_APPLICATION_CREDENTIALS

      - name: 'Terraform initialize'
        run: terraform init

      - name: 'Terraform validate'
        run: terraform validate

      - name: 'Terraform plan'
        run: terraform plan

      - name: 'Terraform apply'
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve

  deploy:
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}

      - name: 'Get GKE credentials'
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}

      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: 'Deploy'
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
#name: Build and Deploy to GKE
#
#on:
#  push:
#    branches:
#      - main
#
#env:
#  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
#  GKE_CLUSTER: cluster-1    # Add your cluster name here.
#  GKE_ZONE: us-central1-c   # Add your cluster zone here.
#  DEPLOYMENT_NAME: gke-test # Add your deployment name here.
#  IMAGE: static-site
#  K8S_MANIFEST: ./path-to-your/kubernetes-manifest.yaml # Add path to your Kubernetes manifest.
#
#jobs:
#  setup-build-publish-deploy:
#    name: Setup, Build, Publish, and Deploy
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      # Setup gcloud CLI
#      - uses: google-github-actions/setup-gcloud@v0.2.1
#        with:
#          service_account_key: ${{ secrets.GKE_SA_KEY }}
#          project_id: ${{ secrets.GKE_PROJECT }}
#
#      # Configure Docker to use the gcloud command-line tool as a credential
#      # helper for authentication
#      - run: |-
#          gcloud --quiet auth configure-docker
#
#      # Get the GKE credentials so we can deploy to the cluster
#      - name: Get GKE credentials
#        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }} --quiet --use-auth-provider=false
#
#      # Build the Docker image
#      - name: Build
#        run: |-
#          docker build \
#            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
#            --build-arg GITHUB_SHA="$GITHUB_SHA" \
#            --build-arg GITHUB_REF="$GITHUB_REF" \
#            .
#
#      # Push the Docker image to Google Container Registry
#      - name: Publish
#        run: |-
#          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
#
#      # Deploy the Docker image to the GKE cluster
#      - name: Deploy
#        run: |-
#          kubectl apply -f ${{ env.K8S_MANIFEST }}
#          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
#          kubectl get services -o wide

#on:
#  push:
#    branches:
#      - master
#
#env:
#  GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-service-account-key.json
#  GOOGLE_K8S_DEPLOYMENT_FILE: ${{ github.workspace }}/deployments/deployment.yaml
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to Google Container Registry
#        uses: docker/login-action@v1
#        with:
#          registry: gcr.io
#          username: _json_key
#          password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
#
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          push: true
#          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/jurny-rider-backend:${{ github.sha }}, gcr.io/${{ secrets.GCP_PROJECT_ID }}/jurny-rider-backend:latest
#          build-args: |
#            --build-arg GITHUB_SHA=${{ github.sha }}
#            --build-arg GITHUB_REF=${{ github.ref }}
#            --build-arg GITHUB_REPOSITORY=${{ github.repository }}
#          context: .
#          file: ./deployments/dockerfiles/Dockerfile
#  #          cache-from: type=local,src=/tmp/.buildx-cache
#  #          cache-to: type=local,dest=/tmp/.buildx-cache
#
#  infrastructure:
#    needs: build
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./deployments/terraform
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup Google Cloud credentials
#        run: echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > $GOOGLE_APPLICATION_CREDENTIALS
#
#      - name: Terraform initialize
#        run: terraform init
#
#      - name: Terraform validate
#        run: terraform validate
#
#      - name: Terraform plan
#        run: terraform plan
#
#      - name: Terraform apply
#        if: github.ref == 'refs/heads/master'
#        run: terraform apply -auto-approve
#
#  deploy:
#    needs: infrastructure
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Set up Cloud SDK
#        uses: google-github-actions/setup-gcloud@v0.2.1
#        with:
#          project_id: ${{ secrets.GCP_PROJECT_ID }}
#          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
#          export_default_credentials: true
#
#      - name: Configure kubectl
#        run: |
#          gcloud container clusters get-credentials unotes-000-gke --zone us-east4-a --project ${{ secrets.GCP_PROJECT_ID }} --internal-ip --quiet
#
#      - name: Deploy to Kubernetes
#        run: kubectl apply -f ${{ env.GOOGLE_K8S_DEPLOYMENT_FILE }}
